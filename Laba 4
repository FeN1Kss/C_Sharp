using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MO_4
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.Write("Integration of a function f(x)= 1/Sqrt(12*x+0.5) on the interval [a;b]\n" + "a = ");
            double a = double.Parse(Console.ReadLine());
            Console.Write("b = ");
            double b = double.Parse(Console.ReadLine());
            Console.Write("Enter the number of division segments n = ");
            int n = int.Parse(Console.ReadLine());
            Console.WriteLine("\nWith method of left-hand rectangles:\n" + "S = " + MethodLeftRectangles(a, b, n)+"\n");
            Console.WriteLine("With method of right-hand rectangles:\n" + "S = " + MethodRightRectangles(a, b, n)+"\n");
            Console.WriteLine("With mid-square method:\n" + "S = " + MethodMidRectangles(a, b, n)+"\n");
            Console.WriteLine("With Simpson's method:\n" + "S = " + MethodSimpson(a, b, n)+"\n");
            Console.WriteLine("With method of trapezoids:\n" + "S = " + MethodTrapezoids(a, b, n)+"\n");

        }
        static double function(double x)
        {
            return (1/Math.Sqrt(12*x+0.5));
        }
        static double MethodLeftRectangles(double a, double b, int n)  
        {
            double s = 0;
            double x = a;
            double h = (b - a) / (n);
            for (int i = 0; i < n; i++)
            {
                s += function(x);
                x += h;
            }
            s *= h;
            return s;
        }
        static double MethodRightRectangles(double a, double b, int n)
        {
            double s = 0;
            double h = (b - a) / (n);
            double x = a + h;
            for (int i = 1; i <= n; i++)
            {
                s += function(x);
                x += h;
            }
            s *= h;
            return s;
        }
        static double MethodMidRectangles(double a, double b, int n)  
        {
            double s = 0;
            double x = a;
            double h = (b - a) / (n);
            for (int i = 0; i < n; i++)
            {
                s += function(x + h / 2);
                x += h;
            }
            s *= h;
            return s;
        }
        static double MethodSimpson(double a, double b, int n) 
        {
            double s = 0;
            double s1 = 0;
            double s2 = 0;
            double h = (b - a) / (n);
            double x = a + h;
            for (int i = 1; i < n; i += 2)
            {
                s1 += function(x);
                x += 2 * h;
            }
            x = a + 2 * h;
            for (int i = 2; i < n; i += 2)
            {
                s2 += function(x);
                x += 2 * h;
            }
            s += function(a) + function(b) + s1 * 4 + s2 * 2;
            s *= h / 3;
            return s;
        }
        static double MethodTrapezoids(double a, double b, int n)  
        {
            double s = 0;
            double x = a;
            double h = (b - a) / (n);
            for (int i = 1; i < n; i++) { x += h; s += function(x); }
            s += function(a) / 2 + function(b) / 2;
            s *= h;
            return s;
        }
    }
}

